{"version":3,"sources":["components/Navbar/ThemeSwitch/ThemeSwitch.jsx","components/Navbar/Navbar.jsx","components/Home/SearchCountry/SearchCountry.jsx","components/Home/FilterRegion/FilterRegion.jsx","components/Home/CountryCard/CountryCard.jsx","components/Home/Home.jsx","components/Country/BackButton/BackButton.jsx","components/Country/BorderCountryBtn/BorderCountryBtn.jsx","components/Country/CountryDetails/CountryDetails.jsx","components/Country/Country.jsx","App.jsx","serviceWorker.js","index.js"],"names":["ThemeSwitch","useState","theme","setTheme","className","type","name","id","onChange","e","target","checked","document","documentElement","setAttribute","htmlFor","icon","darkMode","lightMode","Navbar","to","SearchCountry","countries","parentCallback","faSearch","placeholder","resultCountries","filter","country","toLowerCase","indexOf","value","FilterRegion","region","faChevronDown","CountryCard","props","src","flag","alt","population","toLocaleString","capital","Home","setCountries","setResultCountries","useEffect","fetchCountries","filterResults","countryResults","a","async","fetch","data","json","map","alpha2Code","key","BackButton","faLongArrowAltLeft","BorderCountryBtn","countryCode","countryName","setCountryName","getCountryName","countryData","console","log","CountryDetails","nativeName","subregion","topLevelDomain","currencies","currency","index","length","languages","language","undefined","borders","border","Country","setCountry","fetchCountry","match","params","code","App","path","exact","component","Boolean","window","location","hostname","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.13d190df.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport \"./ThemeSwitch.css\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faMoon as lightMode } from \"@fortawesome/free-regular-svg-icons\";\nimport { faMoon as darkMode } from \"@fortawesome/free-solid-svg-icons\";\n\nconst ThemeSwitch = () => {\n\tconst [theme, setTheme] = useState(\"\");\n\n\tconst switchTheme = e => {\n\t\tif (e.target.checked) {\n\t\t\tdocument.documentElement.setAttribute(\"data-theme\", \"dark\");\n\t\t\tsetTheme(\"dark\");\n\t\t} else {\n\t\t\tdocument.documentElement.setAttribute(\"data-theme\", \"light\");\n\t\t\tsetTheme(\"light\");\n\t\t}\n\t};\n\n\treturn (\n\t\t<div className=\"theme-mode-wrapper\">\n\t\t\t<input\n\t\t\t\ttype=\"checkbox\"\n\t\t\t\tname=\"themeModeToggle\"\n\t\t\t\tid=\"themeModeToggle\"\n\t\t\t\tonChange={switchTheme}\n\t\t\t/>\n\t\t\t<label\n\t\t\t\thtmlFor=\"themeModeToggle\"\n\t\t\t\tclassName=\"stronger-font theme-label-wrapper\"\n\t\t\t>\n\t\t\t\t<span className=\"theme-icon-wrapper\">\n\t\t\t\t\t<FontAwesomeIcon\n\t\t\t\t\t\ticon={theme === \"dark\" ? darkMode : lightMode}\n\t\t\t\t\t/>\n\t\t\t\t</span>\n\t\t\t\t{theme === \"dark\" ? `Light Mode` : `Dark Mode`}\n\t\t\t</label>\n\t\t</div>\n\t);\n};\n\nexport default ThemeSwitch;\n","import React from \"react\";\nimport \"./Navbar.css\";\nimport { Link } from \"react-router-dom\";\nimport ThemeSwitch from \"./ThemeSwitch/ThemeSwitch\";\n\nconst Navbar = () => {\n\treturn (\n\t\t<nav className=\"main-nav\">\n\t\t\t<div className=\"home-link\">\n\t\t\t\t<Link to=\"/\">\n\t\t\t\t\t<h3>Where in the world?</h3>\n\t\t\t\t</Link>\n\t\t\t</div>\n\t\t\t<ThemeSwitch />\n\t\t</nav>\n\t);\n};\n\nexport default Navbar;\n","import React from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faSearch } from \"@fortawesome/free-solid-svg-icons\";\nimport \"./SearchCountry.css\";\n\nconst SearchCountry = ({ countries, parentCallback }) => {\n\tconst search = e => {\n\t\tlet resultCountries = countries.filter(\n\t\t\tcountry =>\n\t\t\t\tcountry.name\n\t\t\t\t\t.toLowerCase()\n\t\t\t\t\t.indexOf(e.target.value.toLowerCase()) > -1\n\t\t);\n\n\t\tparentCallback(resultCountries);\n\t};\n\n\treturn (\n\t\t<label htmlFor=\"searchCountry\" className=\"search-wrapper\">\n\t\t\t<div className=\"search-icon-wrapper\">\n\t\t\t\t<FontAwesomeIcon icon={faSearch} />\n\t\t\t</div>\n\t\t\t<input\n\t\t\t\ttype=\"search\"\n\t\t\t\tname=\"searchCountry\"\n\t\t\t\tid=\"searchCountry\"\n\t\t\t\tplaceholder=\"Search for a country...\"\n\t\t\t\tonChange={search}\n\t\t\t/>\n\t\t</label>\n\t);\n};\n\nexport default SearchCountry;\n","import React from \"react\";\nimport \"./FilterRegion.css\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faChevronDown } from \"@fortawesome/free-solid-svg-icons\";\n\nconst FilterRegion = ({ countries, parentCallback }) => {\n\tconst regionSelect = e => {\n\t\tlet resultCountries = countries.filter(\n\t\t\tcountry =>\n\t\t\t\tcountry.region.toLowerCase() === e.target.value.toLowerCase()\n\t\t);\n\n\t\tif (e.target.value === \" \" || null || undefined) {\n\t\t\tresultCountries = countries;\n\t\t}\n\n\t\tparentCallback(resultCountries);\n\t};\n\n\treturn (\n\t\t<div className=\"filter-region-wrapper\">\n\t\t\t<select\n\t\t\t\tname=\"filterRegion\"\n\t\t\t\tid=\"filterRegion\"\n\t\t\t\tonChange={regionSelect}\n\t\t\t>\n\t\t\t\t<option value=\" \">Filter By Region</option>\n\t\t\t\t<option value=\"Africa\">Africa</option>\n\t\t\t\t<option value=\"Americas\">Americas</option>\n\t\t\t\t<option value=\"Asia\">Asia</option>\n\t\t\t\t<option value=\"Europe\">Europe</option>\n\t\t\t\t<option value=\"Oceania\">Oceania</option>\n\t\t\t</select>\n\t\t\t<div className=\"filter-icon-wrapper\">\n\t\t\t\t<FontAwesomeIcon icon={faChevronDown} />\n\t\t\t</div>\n\t\t</div>\n\t);\n};\n\nexport default FilterRegion;\n","import React from \"react\";\nimport \"./CountryCard.css\";\n\nconst CountryCard = props => {\n\treturn (\n\t\t<div className=\"country-card\">\n\t\t\t<div className=\"country-flag-wrapper\">\n\t\t\t\t<img\n\t\t\t\t\tsrc={props.flag}\n\t\t\t\t\tclassName=\"country-flag\"\n\t\t\t\t\talt={props.name}\n\t\t\t\t></img>\n\t\t\t</div>\n\n\t\t\t<div className=\"country-content\">\n\t\t\t\t<h3 className=\"country-name\">{props.name}</h3>\n\t\t\t\t<ul className=\"country-details\">\n\t\t\t\t\t<li>\n\t\t\t\t\t\t<strong>Population: </strong>\n\t\t\t\t\t\t{props.population.toLocaleString()}\n\t\t\t\t\t</li>\n\t\t\t\t\t<li>\n\t\t\t\t\t\t<strong>Region: </strong>\n\t\t\t\t\t\t{props.region}\n\t\t\t\t\t</li>\n\t\t\t\t\t<li>\n\t\t\t\t\t\t<strong>Capital: </strong>\n\t\t\t\t\t\t{props.capital}\n\t\t\t\t\t</li>\n\t\t\t\t</ul>\n\t\t\t</div>\n\t\t</div>\n\t);\n};\n\nexport default CountryCard;\n","import React, { useState, useEffect } from \"react\";\nimport \"./Home.css\";\nimport SearchCountry from \"./SearchCountry/SearchCountry\";\nimport FilterRegion from \"./FilterRegion/FilterRegion\";\nimport CountryCard from \"./CountryCard/CountryCard\";\n\nimport { Link } from \"react-router-dom\";\n\nconst Home = () => {\n\tconst [countries, setCountries] = useState([]);\n\tconst [resultCountries, setResultCountries] = useState([]);\n\n\tuseEffect(() => {\n\t\tfetchCountries();\n\t}, []);\n\n\tconst filterResults = countryResults => {\n\t\tsetResultCountries(countryResults);\n\t};\n\n\tconst fetchCountries = async () => {\n\t\tconst data = await fetch(\"https://restcountries.eu/rest/v2/all\");\n\n\t\tconst countries = await data.json();\n\n\t\tsetCountries(countries);\n\t\tsetResultCountries(countries);\n\t};\n\t/*\n\t\tJSON SCHEMA FOR API CALL:\n\t\tcountry.\n\t\t\t\tname = Name of the country in a string.\n\t\t\t\talpha2Code = Abbreviated name of the country.\n\t\t\t\tregion = Name of the region the country belongs to.\n\t\t\t\tflag = SVG url of the flag to display.\n\t\t\t\tpopulation = Population of the Country, a number.\n\t\t\t\tcapital = Name of the capital of the country.\n\t*/\n\treturn (\n\t\t<div>\n\t\t\t<section className=\"align filters\">\n\t\t\t\t<SearchCountry\n\t\t\t\t\tcountries={countries}\n\t\t\t\t\tparentCallback={filterResults}\n\t\t\t\t/>\n\t\t\t\t<FilterRegion\n\t\t\t\t\tcountries={countries}\n\t\t\t\t\tparentCallback={filterResults}\n\t\t\t\t/>\n\t\t\t</section>\n\n\t\t\t<section className=\"align countries\">\n\t\t\t\t{resultCountries.map(country => (\n\t\t\t\t\t<Link\n\t\t\t\t\t\tto={`/country/${country.alpha2Code}`}\n\t\t\t\t\t\tkey={country.alpha2Code}\n\t\t\t\t\t>\n\t\t\t\t\t\t<CountryCard\n\t\t\t\t\t\t\tkey={country.name}\n\t\t\t\t\t\t\tname={country.name}\n\t\t\t\t\t\t\tflag={country.flag}\n\t\t\t\t\t\t\tpopulation={country.population}\n\t\t\t\t\t\t\tregion={country.region}\n\t\t\t\t\t\t\tcapital={country.capital}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</Link>\n\t\t\t\t))}\n\t\t\t</section>\n\t\t</div>\n\t);\n};\n\nexport default Home;\n","import React from \"react\";\nimport \"./BackButton.css\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faLongArrowAltLeft } from \"@fortawesome/free-solid-svg-icons\";\nimport { Link } from \"react-router-dom\";\n\nconst BackButton = () => {\n\treturn (\n\t\t<div className=\"back-button-wrapper\">\n\t\t\t<Link to=\"/\">\n\t\t\t\t<button className=\"back-btn\">\n\t\t\t\t\t<FontAwesomeIcon icon={faLongArrowAltLeft} />\n\t\t\t\t\tBack\n\t\t\t\t</button>\n\t\t\t</Link>\n\t\t</div>\n\t);\n};\n\nexport default BackButton;\n","import React, { useState, useEffect } from \"react\";\nimport \"./BorderCountryBtn.css\";\nimport { Link } from \"react-router-dom\";\n\nconst BorderCountryBtn = ({ countryCode }) => {\n\tconst [countryName, setCountryName] = useState(\"\");\n\n\tuseEffect(() => {\n\t\tgetCountryName(countryCode);\n\t}, [countryCode]);\n\n\tconst getCountryName = async countryCode => {\n\t\tconst data = await fetch(\n\t\t\t`https://restcountries.eu/rest/v2/alpha/${countryCode}`\n\t\t);\n\t\tconst countryData = await data.json();\n\n\t\tconst countryName = countryData.name;\n\n\t\tconsole.log(countryName);\n\t\tsetCountryName(countryName);\n\t};\n\n\treturn (\n\t\t<Link to={`/country/${countryCode}`}>\n\t\t\t<button>{countryName}</button>\n\t\t</Link>\n\t);\n};\n\nexport default BorderCountryBtn;\n","import React from \"react\";\nimport \"./CountryDetails.css\";\nimport BorderCountryBtn from \"../BorderCountryBtn/BorderCountryBtn\";\n\nconst CountryDetails = ({ country }) => {\n\treturn (\n\t\t<div className=\"country-details-wrapper\">\n\t\t\t<div className=\"flag-wrapper\">\n\t\t\t\t<img src={country.flag} alt={country.name} />\n\t\t\t</div>\n\t\t\t<div className=\"country-info-wrapper\">\n\t\t\t\t<h2 className=\"country-info-name\">{country.name}</h2>\n\t\t\t\t<div className=\"country-info-lists-wrapper\">\n\t\t\t\t\t<ul className=\"country-info-left\">\n\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t<strong>Native Name: </strong>\n\t\t\t\t\t\t\t{country.nativeName}\n\t\t\t\t\t\t</li>\n\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t<strong>Population: </strong>\n\t\t\t\t\t\t\t{country.population == null || undefined || \"\"\n\t\t\t\t\t\t\t\t? null\n\t\t\t\t\t\t\t\t: country.population.toLocaleString()}\n\t\t\t\t\t\t</li>\n\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t<strong>Region: </strong>\n\t\t\t\t\t\t\t{country.region}\n\t\t\t\t\t\t</li>\n\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t<strong>Sub Region: </strong>\n\t\t\t\t\t\t\t{country.subregion}\n\t\t\t\t\t\t</li>\n\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t<strong>Capital: </strong>\n\t\t\t\t\t\t\t{country.capital}\n\t\t\t\t\t\t</li>\n\t\t\t\t\t</ul>\n\t\t\t\t\t<ul className=\"country-info-right\">\n\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t<strong>Top Level Domain: </strong>\n\t\t\t\t\t\t\t{country.topLevelDomain}\n\t\t\t\t\t\t</li>\n\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t<strong>Currencies: </strong>\n\t\t\t\t\t\t\t{country.currencies == null || undefined ? (\n\t\t\t\t\t\t\t\t<h3>\n\t\t\t\t\t\t\t\t\tThis country has no currencies or it is stil\n\t\t\t\t\t\t\t\t\tloading the data...\n\t\t\t\t\t\t\t\t</h3>\n\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\tcountry.currencies.map((currency, index) => {\n\t\t\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t\t\tcountry.currencies.length <= 1 ||\n\t\t\t\t\t\t\t\t\t\tindex === country.currencies.length - 1\n\t\t\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\t\t\treturn currency.name;\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\treturn `${currency.name}, `;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t</li>\n\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t<strong>Languages: </strong>\n\t\t\t\t\t\t\t{country.languages == null || undefined ? (\n\t\t\t\t\t\t\t\t<h3>\n\t\t\t\t\t\t\t\t\tThis country has no languages or it is stil\n\t\t\t\t\t\t\t\t\tloading the data...\n\t\t\t\t\t\t\t\t</h3>\n\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\tcountry.languages.map((language, index) => {\n\t\t\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t\t\tcountry.languages.length <= 1 ||\n\t\t\t\t\t\t\t\t\t\tindex === country.languages.length - 1\n\t\t\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\t\t\treturn language.name;\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\treturn `${language.name}, `;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t</li>\n\t\t\t\t\t</ul>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"border-countries-wrapper\">\n\t\t\t\t\t<span className=\"border-countries-title\">\n\t\t\t\t\t\t{country.borders !== undefined &&\n\t\t\t\t\t\tcountry.borders.length === 0 ? null : (\n\t\t\t\t\t\t\t<strong>Border Countries:</strong>\n\t\t\t\t\t\t)}\n\t\t\t\t\t</span>\n\t\t\t\t\t<div className=\"border-countries-btn-list-wrapper\">\n\t\t\t\t\t\t{country.borders == undefined || null\n\t\t\t\t\t\t\t? null\n\t\t\t\t\t\t\t: country.borders.map(border => (\n\t\t\t\t\t\t\t\t\t<BorderCountryBtn\n\t\t\t\t\t\t\t\t\t\tcountryCode={border}\n\t\t\t\t\t\t\t\t\t\tkey={border}\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t  ))}\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t);\n};\n\nexport default CountryDetails;\n","import React, { useState, useEffect } from \"react\";\nimport \"./Country.css\";\nimport BackButton from \"./BackButton/BackButton\";\nimport CountryDetails from \"./CountryDetails/CountryDetails\";\n\nconst Country = props => {\n\tconst [country, setCountry] = useState({});\n\n\tuseEffect(() => {\n\t\tfetchCountry(props.match.params.code);\n\t}, [props]);\n\n\tconst fetchCountry = async code => {\n\t\tconst data = await fetch(\n\t\t\t`https://restcountries.eu/rest/v2/alpha/${code}`\n\t\t);\n\t\tconst countryData = await data.json();\n\n\t\tsetCountry(countryData);\n\t};\n\t/*\n\t\tJSON SCHEMA FOR COUNTRY API CALL:\n\t\tcountry.\n\t\t\t\tname = Name of the country in a string.\n\t\t\t\tnativeName = Name of the country in its native language.\n\t\t\t\tpopulation = Population of the country.\n\t\t\t\tregion = Name of the region the country belongs to.\n\t\t\t\tsubregion (yes not camelcase lol) = Name of the sub region the country belongs to.\n\t\t\t\tcapital = Name of the capital of the Country.\n\t\t\t\ttopLevelDomain = [], Name of the ending domain website.\n\t\t\t\tcurrencies = [{}].\n\t\t\t\t\tcode = Abbreviated name of the currency.\n\t\t\t\t\tname = Name of the currency.\n\t\t\t\t\tsymbol = Symbol of the currency.\n\t\t\t\tlanguages = [{}].\n\t\t\t\t\tiso639_1 = 2 code name of the language.\n\t\t\t\t\tiso639_2 = 3 code name of the language.\n\t\t\t\t\tname = Name of the language.\n\t\t\t\t\tnativeName = Name of the language in its native langauge.\n\t\t\t\tborders = [], name of the call codes for each border country.\n\t\t\t\tflag = SVG Url of the flag.\n\t*/\n\n\treturn (\n\t\t<div className=\"align\">\n\t\t\t<BackButton />\n\t\t\t<CountryDetails country={country} />\n\t\t</div>\n\t);\n};\n\nexport default Country;\n","import React from \"react\";\nimport \"./App.css\";\nimport Navbar from \"./components/Navbar/Navbar\";\nimport Home from \"./components/Home/Home\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport Country from \"./components/Country/Country\";\n\nconst App = () => {\n\treturn (\n\t\t<Router>\n\t\t\t<div>\n\t\t\t\t<Navbar />\n\t\t\t\t<Switch>\n\t\t\t\t\t<Route path=\"/\" exact component={Home} />\n\t\t\t\t\t<Route path=\"/country/:code\" exact component={Country} />\n\t\t\t\t</Switch>\n\t\t\t</div>\n\t\t</Router>\n\t);\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}